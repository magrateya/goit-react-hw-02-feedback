{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/FeedbackOptions/Feedbackoption.module.css","components/Statistics/Statistics.module.css","components/Section/Section.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","labels","Object","keys","className","s","container","map","label","onClick","Statistics","good","neutral","bad","total","positivePercentage","list","Section","title","children","section","Notification","message","App","state","handleClick","option","setState","prevState","countTotalFeedback","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAuBeA,MAnBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC5BC,EAASC,OAAOC,KAAKJ,GAE3B,OACE,qBAAKK,UAAWC,IAAEC,UAAlB,SACGL,EAAOM,KAAI,SAAAC,GAAK,OACf,wBAAoBC,QAAS,kBAAMT,EAAgBQ,IAAnD,SACGA,GADUA,S,gBCWNE,EAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qBAAIX,UAAWC,IAAEW,KAAjB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,Y,gBCQWE,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,sBAAKf,UAAWC,IAAEe,QAAlB,UACE,6BAAKF,IACJC,MCLQ,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,I,ICUQC,E,4MACnBC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBAAQF,EAASE,EAAUF,GAAU,O,EAG9DG,mBAAqB,WAKnB,OAJc3B,OAAOC,KAAK,EAAKqB,OAAOM,QACpC,SAACC,EAAKC,GAAN,OAAgBD,EAAM,EAAKP,MAAMQ,KACjC,I,EAIJC,gCAAkC,WAChC,IAAMnB,EAAQ,EAAKe,qBACnB,OAAOf,GAASoB,KAAKC,MAAyB,IAAlB,EAAKX,MAAMb,KAAcG,I,uDAIrD,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEnB,QAASqC,KAAKZ,MACdxB,gBAAiBoC,KAAKX,gBAI1B,cAAC,EAAD,CAASP,MAAM,aAAf,SACiC,IAA9BkB,KAAKP,qBACJ,cAACR,EAAD,CAAcC,QAAQ,sBAEtB,cAAC,EAAD,CACEX,KAAMyB,KAAKZ,MAAMb,KACjBC,QAASwB,KAAKZ,MAAMZ,QACpBC,IAAKuB,KAAKZ,MAAMX,IAChBC,MAAOsB,KAAKP,qBACZd,mBAAoBqB,KAAKH,6C,GA1CNI,aCTjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,UAAY,oC,kBCA9BD,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.cd5715d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Feedbackoption.module.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  const labels = Object.keys(options);\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      {labels.map(label => (\r\n        <button key={label} onClick={() => onLeaveFeedback(label)}>\r\n          {label}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul className={s.list}>\r\n    <li>Good: {good}</li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {positivePercentage} %</li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <div className={s.section}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Section from './components/Section/Section';\r\nimport Notification from './components/Notification/Notification';\r\n// import FeedbackData from './components/Feedback/Feedback';\r\n\r\n// export default function App() {\r\n//   return (\r\n//     <div>\r\n//       <FeedbackData />\r\n//     </div>\r\n//   );\r\n// }\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleClick = option => {\r\n    this.setState(prevState => ({ [option]: prevState[option] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const total = Object.keys(this.state).reduce(\r\n      (acc, value) => acc + this.state[value],\r\n      0,\r\n    );\r\n    return total;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    return total && Math.round((this.state.good * 100) / total);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.handleClick}\r\n          />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Feedbackoption_container__2r8fF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__1VQuS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__38hZS\"};"],"sourceRoot":""}